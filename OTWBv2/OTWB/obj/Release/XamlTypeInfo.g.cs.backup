//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Geometric_Chuck
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::OTWB.OTWB_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::OTWB.OTWB_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::OTWB.OTWB_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace OTWB.OTWB_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            if(xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForType(type);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForName(typeName);
            }
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_LayoutAwarePage() { return new global::Geometric_Chuck.Common.LayoutAwarePage(); }

        private object Activate_1_StartPage() { return new global::Geometric_Chuck.StartPage(); }

        private object Activate_2_GcodePage() { return new global::Geometric_Chuck.GcodePage(); }

        private object Activate_3_CodeSettingsContent() { return new global::OTWB.Settings.CodeSettingsContent(); }

        private object Activate_4_CodeGenTemplates() { return new global::OTWB.CodeGeneration.CodeGenTemplates(); }

        private object Activate_6_PathListIndexConverter() { return new global::Geometric_Chuck.Common.PathListIndexConverter(); }

        private object Activate_7_PolyPointsConverter() { return new global::Geometric_Chuck.Common.PolyPointsConverter(); }

        private object Activate_8_CoordTemplateSelector() { return new global::OTWB.Coordinates.CoordTemplateSelector(); }

        private object Activate_9_PointsControl() { return new global::Geometric_Chuck.MyControls.PointsControl(); }

        private object Activate_10_NumericUpDown() { return new global::Callisto.Controls.NumericUpDown(); }

        private object Activate_11_RangeControl() { return new global::Geometric_Chuck.MyControls.RangeControl(); }

        private object Activate_12_GridControl() { return new global::Geometric_Chuck.MyControls.GridControl(); }

        private object Activate_13_NewRosetteFlyoutControl() { return new global::Geometric_Chuck.MyControls.NewRosetteFlyoutControl(); }

        private object Activate_14_Rosette() { return new global::Geometric_Chuck.Spindle.Rosette(); }

        private object Activate_15_RossControl() { return new global::Geometric_Chuck.MyControls.RossControl(); }

        private object Activate_16_RadianToAngleConverter() { return new global::Geometric_Chuck.Common.RadianToAngleConverter(); }

        private object Activate_17_RosetteTemplateSelector() { return new global::Geometric_Chuck.Spindle.RosetteTemplateSelector(); }

        private object Activate_18_SpindleDataDisplay() { return new global::Geometric_Chuck.SpindleDataDisplay(); }

        private object Activate_19_EnumNameConverter() { return new global::TCD.Controls.EnumNameConverter(); }

        private object Activate_20_PathDisplay() { return new global::Geometric_Chuck.PathDisplay(); }

        private object Activate_21_RadialGrid() { return new global::Geometric_Chuck.RadialGrid(); }

        private object Activate_22_Grid() { return new global::Geometric_Chuck.Grid(); }

        private object Activate_23_PolygonCollection() { return new global::Geometric_Chuck.PolygonCollection(); }

        private object Activate_24_BasicLib() { return new global::Geometric_Chuck.BasicLib(); }

        private object Activate_25_SpindlePage() { return new global::Geometric_Chuck.SpindlePage(); }

        private object Activate_26_WheelDataControl() { return new global::Geometric_Chuck.Controls.WheelDataControl(); }

        private object Activate_27_Wheels() { return new global::Geometric_Chuck.Wheels(); }

        private object Activate_28_BSDControl() { return new global::Geometric_Chuck.MyControls.BSDControl(); }

        private object Activate_29_RossPage() { return new global::Geometric_Chuck.RossPage(); }

        private object Activate_30_PointIndexConverter() { return new global::Geometric_Chuck.Common.PointIndexConverter(); }

        private object Activate_31_PatternPathListNameConverter() { return new global::Geometric_Chuck.Common.PatternPathListNameConverter(); }

        private object Activate_32_BooleanToVisibilityConverter() { return new global::Geometric_Chuck.Common.BooleanToVisibilityConverter(); }

        private object Activate_33_MainPage() { return new global::Geometric_Chuck.MainPage(); }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::OTWB.OTWB_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::OTWB.OTWB_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::OTWB.OTWB_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::OTWB.OTWB_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Object":
                xamlType = new global::OTWB.OTWB_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "Boolean":
                xamlType = new global::OTWB.OTWB_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Windows.UI.Xaml.Controls.DataTemplateSelector":
                xamlType = new global::OTWB.OTWB_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.DataTemplateSelector));
                break;

            case "Windows.UI.Xaml.DataTemplate":
                xamlType = new global::OTWB.OTWB_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DataTemplate));
                break;

            case "String":
                xamlType = new global::OTWB.OTWB_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Int32":
                xamlType = new global::OTWB.OTWB_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "Windows.UI.Xaml.Controls.TextBox":
                xamlType = new global::OTWB.OTWB_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.TextBox));
                break;

            case "Double":
                xamlType = new global::OTWB.OTWB_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Double));
                break;

            case "Geometric_Chuck.Common.LayoutAwarePage":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_LayoutAwarePage;
                xamlType = userType;
                break;

            case "Geometric_Chuck.StartPage":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.StartPage), GetXamlTypeByName("Geometric_Chuck.Common.LayoutAwarePage"));
                userType.Activator = Activate_1_StartPage;
                xamlType = userType;
                break;

            case "Geometric_Chuck.GcodePage":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.GcodePage), GetXamlTypeByName("Geometric_Chuck.Common.LayoutAwarePage"));
                userType.Activator = Activate_2_GcodePage;
                xamlType = userType;
                break;

            case "OTWB.Settings.CodeSettingsContent":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OTWB.Settings.CodeSettingsContent), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_3_CodeSettingsContent;
                userType.AddMemberName("CodeTemplates");
                userType.AddMemberName("UseRotaryTable");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("UseAbsoluteMoves");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("UseSubroutine");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("UseSingleFile");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "OTWB.CodeGeneration.CodeGenTemplates":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OTWB.CodeGeneration.CodeGenTemplates), GetXamlTypeByName("Geometric_Chuck.Common.BindableBase"));
                userType.Activator = Activate_4_CodeGenTemplates;
                xamlType = userType;
                break;

            case "Geometric_Chuck.Common.BindableBase":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.Common.BindableBase), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Geometric_Chuck.Common.PathListIndexConverter":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.Common.PathListIndexConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_PathListIndexConverter;
                xamlType = userType;
                break;

            case "Geometric_Chuck.Common.PolyPointsConverter":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.Common.PolyPointsConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_PolyPointsConverter;
                xamlType = userType;
                break;

            case "OTWB.Coordinates.CoordTemplateSelector":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::OTWB.Coordinates.CoordTemplateSelector), GetXamlTypeByName("Windows.UI.Xaml.Controls.DataTemplateSelector"));
                userType.Activator = Activate_8_CoordTemplateSelector;
                userType.AddMemberName("PointTemplate");
                userType.AddMemberName("CylindricalTemplate");
                userType.AddMemberName("CartesianTemplate");
                userType.AddMemberName("DefaultTemplate");
                userType.AddMemberName("SphericalTemplate");
                xamlType = userType;
                break;

            case "Geometric_Chuck.MyControls.PointsControl":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.MyControls.PointsControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_9_PointsControl;
                userType.AddMemberName("Title");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("SelectedPath");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "Callisto.Controls.NumericUpDown":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Callisto.Controls.NumericUpDown), GetXamlTypeByName("Windows.UI.Xaml.Controls.TextBox"));
                userType.Activator = Activate_10_NumericUpDown;
                userType.AddMemberName("Value");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Maximum");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Delay");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("Interval");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("Minimum");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Increment");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("DecimalPlaces");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "Geometric_Chuck.MyControls.RangeControl":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.MyControls.RangeControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_11_RangeControl;
                xamlType = userType;
                break;

            case "Geometric_Chuck.MyControls.GridControl":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.MyControls.GridControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_12_GridControl;
                xamlType = userType;
                break;

            case "Geometric_Chuck.MyControls.NewRosetteFlyoutControl":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.MyControls.NewRosetteFlyoutControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_13_NewRosetteFlyoutControl;
                userType.AddMemberName("NewRosette");
                xamlType = userType;
                break;

            case "Geometric_Chuck.Spindle.Rosette":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.Spindle.Rosette), GetXamlTypeByName("Geometric_Chuck.Common.BindableBase"));
                userType.Activator = Activate_14_Rosette;
                xamlType = userType;
                break;

            case "Geometric_Chuck.MyControls.RossControl":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.MyControls.RossControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_15_RossControl;
                xamlType = userType;
                break;

            case "Geometric_Chuck.Common.RadianToAngleConverter":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.Common.RadianToAngleConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_16_RadianToAngleConverter;
                xamlType = userType;
                break;

            case "Geometric_Chuck.Spindle.RosetteTemplateSelector":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.Spindle.RosetteTemplateSelector), GetXamlTypeByName("Windows.UI.Xaml.Controls.DataTemplateSelector"));
                userType.Activator = Activate_17_RosetteTemplateSelector;
                userType.AddMemberName("TemplateA");
                userType.AddMemberName("TemplateB");
                userType.AddMemberName("TemplateC");
                userType.AddMemberName("TemplateD");
                xamlType = userType;
                break;

            case "Geometric_Chuck.SpindleDataDisplay":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.SpindleDataDisplay), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_18_SpindleDataDisplay;
                userType.AddMemberName("CurrentRosette");
                xamlType = userType;
                break;

            case "TCD.Controls.EnumNameConverter":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::TCD.Controls.EnumNameConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_19_EnumNameConverter;
                xamlType = userType;
                break;

            case "Geometric_Chuck.PathDisplay":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.PathDisplay), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_20_PathDisplay;
                userType.AddMemberName("Grid");
                userType.AddMemberName("PathWidth");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("CurrentPath");
                xamlType = userType;
                break;

            case "Geometric_Chuck.RadialGrid":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.RadialGrid), GetXamlTypeByName("Geometric_Chuck.Grid"));
                userType.Activator = Activate_21_RadialGrid;
                xamlType = userType;
                break;

            case "Geometric_Chuck.Grid":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.Grid), GetXamlTypeByName("Geometric_Chuck.Common.BindableBase"));
                userType.Activator = Activate_22_Grid;
                xamlType = userType;
                break;

            case "Geometric_Chuck.PolygonCollection":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.PolygonCollection), GetXamlTypeByName("Geometric_Chuck.Common.BindableBase"));
                userType.Activator = Activate_23_PolygonCollection;
                xamlType = userType;
                break;

            case "Geometric_Chuck.BasicLib":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.BasicLib), GetXamlTypeByName("Object"));
                userType.Activator = Activate_24_BasicLib;
                userType.AddMemberName("Setting");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                xamlType = userType;
                break;

            case "Geometric_Chuck.SpindlePage":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.SpindlePage), GetXamlTypeByName("Geometric_Chuck.Common.LayoutAwarePage"));
                userType.Activator = Activate_25_SpindlePage;
                xamlType = userType;
                break;

            case "Geometric_Chuck.Controls.WheelDataControl":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.Controls.WheelDataControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_26_WheelDataControl;
                xamlType = userType;
                break;

            case "Geometric_Chuck.Wheels":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.Wheels), GetXamlTypeByName("Geometric_Chuck.Common.LayoutAwarePage"));
                userType.Activator = Activate_27_Wheels;
                xamlType = userType;
                break;

            case "Geometric_Chuck.MyControls.BSDControl":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.MyControls.BSDControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_28_BSDControl;
                xamlType = userType;
                break;

            case "Geometric_Chuck.RossPage":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.RossPage), GetXamlTypeByName("Geometric_Chuck.Common.LayoutAwarePage"));
                userType.Activator = Activate_29_RossPage;
                xamlType = userType;
                break;

            case "Geometric_Chuck.Common.PointIndexConverter":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.Common.PointIndexConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_30_PointIndexConverter;
                xamlType = userType;
                break;

            case "Geometric_Chuck.Common.PatternPathListNameConverter":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.Common.PatternPathListNameConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_31_PatternPathListNameConverter;
                xamlType = userType;
                break;

            case "Geometric_Chuck.Common.BooleanToVisibilityConverter":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.Common.BooleanToVisibilityConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_32_BooleanToVisibilityConverter;
                xamlType = userType;
                break;

            case "Geometric_Chuck.MainPage":
                userType = new global::OTWB.OTWB_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Geometric_Chuck.MainPage), GetXamlTypeByName("Geometric_Chuck.Common.LayoutAwarePage"));
                userType.Activator = Activate_33_MainPage;
                xamlType = userType;
                break;

            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Callisto.Callisto_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::TCD.Controls.TCD_Controls__W8__XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private object get_0_CodeSettingsContent_CodeTemplates(object instance)
        {
            var that = (global::OTWB.Settings.CodeSettingsContent)instance;
            return that.CodeTemplates;
        }
        private void set_0_CodeSettingsContent_CodeTemplates(object instance, object Value)
        {
            var that = (global::OTWB.Settings.CodeSettingsContent)instance;
            that.CodeTemplates = (global::OTWB.CodeGeneration.CodeGenTemplates)Value;
        }
        private object get_1_CodeSettingsContent_UseRotaryTable(object instance)
        {
            var that = (global::OTWB.Settings.CodeSettingsContent)instance;
            return that.UseRotaryTable;
        }
        private void set_1_CodeSettingsContent_UseRotaryTable(object instance, object Value)
        {
            var that = (global::OTWB.Settings.CodeSettingsContent)instance;
            that.UseRotaryTable = (global::System.Boolean)Value;
        }
        private object get_2_CodeSettingsContent_UseAbsoluteMoves(object instance)
        {
            var that = (global::OTWB.Settings.CodeSettingsContent)instance;
            return that.UseAbsoluteMoves;
        }
        private void set_2_CodeSettingsContent_UseAbsoluteMoves(object instance, object Value)
        {
            var that = (global::OTWB.Settings.CodeSettingsContent)instance;
            that.UseAbsoluteMoves = (global::System.Boolean)Value;
        }
        private object get_3_CodeSettingsContent_UseSubroutine(object instance)
        {
            var that = (global::OTWB.Settings.CodeSettingsContent)instance;
            return that.UseSubroutine;
        }
        private void set_3_CodeSettingsContent_UseSubroutine(object instance, object Value)
        {
            var that = (global::OTWB.Settings.CodeSettingsContent)instance;
            that.UseSubroutine = (global::System.Boolean)Value;
        }
        private object get_4_CodeSettingsContent_UseSingleFile(object instance)
        {
            var that = (global::OTWB.Settings.CodeSettingsContent)instance;
            return that.UseSingleFile;
        }
        private void set_4_CodeSettingsContent_UseSingleFile(object instance, object Value)
        {
            var that = (global::OTWB.Settings.CodeSettingsContent)instance;
            that.UseSingleFile = (global::System.Boolean)Value;
        }
        private object get_5_CoordTemplateSelector_PointTemplate(object instance)
        {
            var that = (global::OTWB.Coordinates.CoordTemplateSelector)instance;
            return that.PointTemplate;
        }
        private void set_5_CoordTemplateSelector_PointTemplate(object instance, object Value)
        {
            var that = (global::OTWB.Coordinates.CoordTemplateSelector)instance;
            that.PointTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_6_CoordTemplateSelector_CylindricalTemplate(object instance)
        {
            var that = (global::OTWB.Coordinates.CoordTemplateSelector)instance;
            return that.CylindricalTemplate;
        }
        private void set_6_CoordTemplateSelector_CylindricalTemplate(object instance, object Value)
        {
            var that = (global::OTWB.Coordinates.CoordTemplateSelector)instance;
            that.CylindricalTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_7_CoordTemplateSelector_CartesianTemplate(object instance)
        {
            var that = (global::OTWB.Coordinates.CoordTemplateSelector)instance;
            return that.CartesianTemplate;
        }
        private void set_7_CoordTemplateSelector_CartesianTemplate(object instance, object Value)
        {
            var that = (global::OTWB.Coordinates.CoordTemplateSelector)instance;
            that.CartesianTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_8_CoordTemplateSelector_DefaultTemplate(object instance)
        {
            var that = (global::OTWB.Coordinates.CoordTemplateSelector)instance;
            return that.DefaultTemplate;
        }
        private void set_8_CoordTemplateSelector_DefaultTemplate(object instance, object Value)
        {
            var that = (global::OTWB.Coordinates.CoordTemplateSelector)instance;
            that.DefaultTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_9_CoordTemplateSelector_SphericalTemplate(object instance)
        {
            var that = (global::OTWB.Coordinates.CoordTemplateSelector)instance;
            return that.SphericalTemplate;
        }
        private void set_9_CoordTemplateSelector_SphericalTemplate(object instance, object Value)
        {
            var that = (global::OTWB.Coordinates.CoordTemplateSelector)instance;
            that.SphericalTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_10_PointsControl_Title(object instance)
        {
            var that = (global::Geometric_Chuck.MyControls.PointsControl)instance;
            return that.Title;
        }
        private void set_10_PointsControl_Title(object instance, object Value)
        {
            var that = (global::Geometric_Chuck.MyControls.PointsControl)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_11_PointsControl_SelectedPath(object instance)
        {
            var that = (global::Geometric_Chuck.MyControls.PointsControl)instance;
            return that.SelectedPath;
        }
        private void set_11_PointsControl_SelectedPath(object instance, object Value)
        {
            var that = (global::Geometric_Chuck.MyControls.PointsControl)instance;
            that.SelectedPath = (global::System.Int32)Value;
        }
        private object get_12_NumericUpDown_Value(object instance)
        {
            var that = (global::Callisto.Controls.NumericUpDown)instance;
            return that.Value;
        }
        private void set_12_NumericUpDown_Value(object instance, object Value)
        {
            var that = (global::Callisto.Controls.NumericUpDown)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_13_NumericUpDown_Maximum(object instance)
        {
            var that = (global::Callisto.Controls.NumericUpDown)instance;
            return that.Maximum;
        }
        private void set_13_NumericUpDown_Maximum(object instance, object Value)
        {
            var that = (global::Callisto.Controls.NumericUpDown)instance;
            that.Maximum = (global::System.Double)Value;
        }
        private object get_14_NumericUpDown_Delay(object instance)
        {
            var that = (global::Callisto.Controls.NumericUpDown)instance;
            return that.Delay;
        }
        private void set_14_NumericUpDown_Delay(object instance, object Value)
        {
            var that = (global::Callisto.Controls.NumericUpDown)instance;
            that.Delay = (global::System.Int32)Value;
        }
        private object get_15_NumericUpDown_Interval(object instance)
        {
            var that = (global::Callisto.Controls.NumericUpDown)instance;
            return that.Interval;
        }
        private void set_15_NumericUpDown_Interval(object instance, object Value)
        {
            var that = (global::Callisto.Controls.NumericUpDown)instance;
            that.Interval = (global::System.Int32)Value;
        }
        private object get_16_NumericUpDown_Minimum(object instance)
        {
            var that = (global::Callisto.Controls.NumericUpDown)instance;
            return that.Minimum;
        }
        private void set_16_NumericUpDown_Minimum(object instance, object Value)
        {
            var that = (global::Callisto.Controls.NumericUpDown)instance;
            that.Minimum = (global::System.Double)Value;
        }
        private object get_17_NumericUpDown_Increment(object instance)
        {
            var that = (global::Callisto.Controls.NumericUpDown)instance;
            return that.Increment;
        }
        private void set_17_NumericUpDown_Increment(object instance, object Value)
        {
            var that = (global::Callisto.Controls.NumericUpDown)instance;
            that.Increment = (global::System.Double)Value;
        }
        private object get_18_NumericUpDown_DecimalPlaces(object instance)
        {
            var that = (global::Callisto.Controls.NumericUpDown)instance;
            return that.DecimalPlaces;
        }
        private void set_18_NumericUpDown_DecimalPlaces(object instance, object Value)
        {
            var that = (global::Callisto.Controls.NumericUpDown)instance;
            that.DecimalPlaces = (global::System.Int32)Value;
        }
        private object get_19_NewRosetteFlyoutControl_NewRosette(object instance)
        {
            var that = (global::Geometric_Chuck.MyControls.NewRosetteFlyoutControl)instance;
            return that.NewRosette;
        }
        private void set_19_NewRosetteFlyoutControl_NewRosette(object instance, object Value)
        {
            var that = (global::Geometric_Chuck.MyControls.NewRosetteFlyoutControl)instance;
            that.NewRosette = (global::Geometric_Chuck.Spindle.Rosette)Value;
        }
        private object get_20_RosetteTemplateSelector_TemplateA(object instance)
        {
            var that = (global::Geometric_Chuck.Spindle.RosetteTemplateSelector)instance;
            return that.TemplateA;
        }
        private void set_20_RosetteTemplateSelector_TemplateA(object instance, object Value)
        {
            var that = (global::Geometric_Chuck.Spindle.RosetteTemplateSelector)instance;
            that.TemplateA = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_21_RosetteTemplateSelector_TemplateB(object instance)
        {
            var that = (global::Geometric_Chuck.Spindle.RosetteTemplateSelector)instance;
            return that.TemplateB;
        }
        private void set_21_RosetteTemplateSelector_TemplateB(object instance, object Value)
        {
            var that = (global::Geometric_Chuck.Spindle.RosetteTemplateSelector)instance;
            that.TemplateB = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_22_RosetteTemplateSelector_TemplateC(object instance)
        {
            var that = (global::Geometric_Chuck.Spindle.RosetteTemplateSelector)instance;
            return that.TemplateC;
        }
        private void set_22_RosetteTemplateSelector_TemplateC(object instance, object Value)
        {
            var that = (global::Geometric_Chuck.Spindle.RosetteTemplateSelector)instance;
            that.TemplateC = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_23_RosetteTemplateSelector_TemplateD(object instance)
        {
            var that = (global::Geometric_Chuck.Spindle.RosetteTemplateSelector)instance;
            return that.TemplateD;
        }
        private void set_23_RosetteTemplateSelector_TemplateD(object instance, object Value)
        {
            var that = (global::Geometric_Chuck.Spindle.RosetteTemplateSelector)instance;
            that.TemplateD = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_24_SpindleDataDisplay_CurrentRosette(object instance)
        {
            var that = (global::Geometric_Chuck.SpindleDataDisplay)instance;
            return that.CurrentRosette;
        }
        private object get_25_PathDisplay_Grid(object instance)
        {
            var that = (global::Geometric_Chuck.PathDisplay)instance;
            return that.Grid;
        }
        private void set_25_PathDisplay_Grid(object instance, object Value)
        {
            var that = (global::Geometric_Chuck.PathDisplay)instance;
            that.Grid = (global::Geometric_Chuck.RadialGrid)Value;
        }
        private object get_26_PathDisplay_PathWidth(object instance)
        {
            var that = (global::Geometric_Chuck.PathDisplay)instance;
            return that.PathWidth;
        }
        private void set_26_PathDisplay_PathWidth(object instance, object Value)
        {
            var that = (global::Geometric_Chuck.PathDisplay)instance;
            that.PathWidth = (global::System.Double)Value;
        }
        private object get_27_PathDisplay_CurrentPath(object instance)
        {
            var that = (global::Geometric_Chuck.PathDisplay)instance;
            return that.CurrentPath;
        }
        private void set_27_PathDisplay_CurrentPath(object instance, object Value)
        {
            var that = (global::Geometric_Chuck.PathDisplay)instance;
            that.CurrentPath = (global::Geometric_Chuck.PolygonCollection)Value;
        }
        private object get_28_BasicLib_Setting(object instance)
        {
            return global::Geometric_Chuck.BasicLib.GetSetting((global::System.String)instance);
        }
        private void set_28_BasicLib_Setting(object instance, object Value)
        {
            global::Geometric_Chuck.BasicLib.SetSetting((global::System.String)instance, (System.Object)Value);
                    }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::OTWB.OTWB_XamlTypeInfo.XamlMember xamlMember = null;
            global::OTWB.OTWB_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "OTWB.Settings.CodeSettingsContent.CodeTemplates":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OTWB.Settings.CodeSettingsContent");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "CodeTemplates", "OTWB.CodeGeneration.CodeGenTemplates");
                xamlMember.Getter = get_0_CodeSettingsContent_CodeTemplates;
                xamlMember.Setter = set_0_CodeSettingsContent_CodeTemplates;
                break;
            case "OTWB.Settings.CodeSettingsContent.UseRotaryTable":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OTWB.Settings.CodeSettingsContent");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "UseRotaryTable", "Boolean");
                xamlMember.Getter = get_1_CodeSettingsContent_UseRotaryTable;
                xamlMember.Setter = set_1_CodeSettingsContent_UseRotaryTable;
                break;
            case "OTWB.Settings.CodeSettingsContent.UseAbsoluteMoves":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OTWB.Settings.CodeSettingsContent");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "UseAbsoluteMoves", "Boolean");
                xamlMember.Getter = get_2_CodeSettingsContent_UseAbsoluteMoves;
                xamlMember.Setter = set_2_CodeSettingsContent_UseAbsoluteMoves;
                break;
            case "OTWB.Settings.CodeSettingsContent.UseSubroutine":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OTWB.Settings.CodeSettingsContent");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "UseSubroutine", "Boolean");
                xamlMember.Getter = get_3_CodeSettingsContent_UseSubroutine;
                xamlMember.Setter = set_3_CodeSettingsContent_UseSubroutine;
                break;
            case "OTWB.Settings.CodeSettingsContent.UseSingleFile":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OTWB.Settings.CodeSettingsContent");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "UseSingleFile", "Boolean");
                xamlMember.Getter = get_4_CodeSettingsContent_UseSingleFile;
                xamlMember.Setter = set_4_CodeSettingsContent_UseSingleFile;
                break;
            case "OTWB.Coordinates.CoordTemplateSelector.PointTemplate":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OTWB.Coordinates.CoordTemplateSelector");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "PointTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_5_CoordTemplateSelector_PointTemplate;
                xamlMember.Setter = set_5_CoordTemplateSelector_PointTemplate;
                break;
            case "OTWB.Coordinates.CoordTemplateSelector.CylindricalTemplate":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OTWB.Coordinates.CoordTemplateSelector");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "CylindricalTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_6_CoordTemplateSelector_CylindricalTemplate;
                xamlMember.Setter = set_6_CoordTemplateSelector_CylindricalTemplate;
                break;
            case "OTWB.Coordinates.CoordTemplateSelector.CartesianTemplate":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OTWB.Coordinates.CoordTemplateSelector");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "CartesianTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_7_CoordTemplateSelector_CartesianTemplate;
                xamlMember.Setter = set_7_CoordTemplateSelector_CartesianTemplate;
                break;
            case "OTWB.Coordinates.CoordTemplateSelector.DefaultTemplate":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OTWB.Coordinates.CoordTemplateSelector");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "DefaultTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_8_CoordTemplateSelector_DefaultTemplate;
                xamlMember.Setter = set_8_CoordTemplateSelector_DefaultTemplate;
                break;
            case "OTWB.Coordinates.CoordTemplateSelector.SphericalTemplate":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("OTWB.Coordinates.CoordTemplateSelector");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "SphericalTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_9_CoordTemplateSelector_SphericalTemplate;
                xamlMember.Setter = set_9_CoordTemplateSelector_SphericalTemplate;
                break;
            case "Geometric_Chuck.MyControls.PointsControl.Title":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Geometric_Chuck.MyControls.PointsControl");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_10_PointsControl_Title;
                xamlMember.Setter = set_10_PointsControl_Title;
                break;
            case "Geometric_Chuck.MyControls.PointsControl.SelectedPath":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Geometric_Chuck.MyControls.PointsControl");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "SelectedPath", "Int32");
                xamlMember.Getter = get_11_PointsControl_SelectedPath;
                xamlMember.Setter = set_11_PointsControl_SelectedPath;
                break;
            case "Callisto.Controls.NumericUpDown.Value":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Callisto.Controls.NumericUpDown");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_NumericUpDown_Value;
                xamlMember.Setter = set_12_NumericUpDown_Value;
                break;
            case "Callisto.Controls.NumericUpDown.Maximum":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Callisto.Controls.NumericUpDown");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "Maximum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_NumericUpDown_Maximum;
                xamlMember.Setter = set_13_NumericUpDown_Maximum;
                break;
            case "Callisto.Controls.NumericUpDown.Delay":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Callisto.Controls.NumericUpDown");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "Delay", "Int32");
                xamlMember.Getter = get_14_NumericUpDown_Delay;
                xamlMember.Setter = set_14_NumericUpDown_Delay;
                break;
            case "Callisto.Controls.NumericUpDown.Interval":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Callisto.Controls.NumericUpDown");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "Interval", "Int32");
                xamlMember.Getter = get_15_NumericUpDown_Interval;
                xamlMember.Setter = set_15_NumericUpDown_Interval;
                break;
            case "Callisto.Controls.NumericUpDown.Minimum":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Callisto.Controls.NumericUpDown");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "Minimum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_NumericUpDown_Minimum;
                xamlMember.Setter = set_16_NumericUpDown_Minimum;
                break;
            case "Callisto.Controls.NumericUpDown.Increment":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Callisto.Controls.NumericUpDown");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "Increment", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_NumericUpDown_Increment;
                xamlMember.Setter = set_17_NumericUpDown_Increment;
                break;
            case "Callisto.Controls.NumericUpDown.DecimalPlaces":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Callisto.Controls.NumericUpDown");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "DecimalPlaces", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_NumericUpDown_DecimalPlaces;
                xamlMember.Setter = set_18_NumericUpDown_DecimalPlaces;
                break;
            case "Geometric_Chuck.MyControls.NewRosetteFlyoutControl.NewRosette":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Geometric_Chuck.MyControls.NewRosetteFlyoutControl");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "NewRosette", "Geometric_Chuck.Spindle.Rosette");
                xamlMember.Getter = get_19_NewRosetteFlyoutControl_NewRosette;
                xamlMember.Setter = set_19_NewRosetteFlyoutControl_NewRosette;
                break;
            case "Geometric_Chuck.Spindle.RosetteTemplateSelector.TemplateA":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Geometric_Chuck.Spindle.RosetteTemplateSelector");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "TemplateA", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_20_RosetteTemplateSelector_TemplateA;
                xamlMember.Setter = set_20_RosetteTemplateSelector_TemplateA;
                break;
            case "Geometric_Chuck.Spindle.RosetteTemplateSelector.TemplateB":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Geometric_Chuck.Spindle.RosetteTemplateSelector");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "TemplateB", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_21_RosetteTemplateSelector_TemplateB;
                xamlMember.Setter = set_21_RosetteTemplateSelector_TemplateB;
                break;
            case "Geometric_Chuck.Spindle.RosetteTemplateSelector.TemplateC":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Geometric_Chuck.Spindle.RosetteTemplateSelector");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "TemplateC", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_22_RosetteTemplateSelector_TemplateC;
                xamlMember.Setter = set_22_RosetteTemplateSelector_TemplateC;
                break;
            case "Geometric_Chuck.Spindle.RosetteTemplateSelector.TemplateD":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Geometric_Chuck.Spindle.RosetteTemplateSelector");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "TemplateD", "Windows.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_23_RosetteTemplateSelector_TemplateD;
                xamlMember.Setter = set_23_RosetteTemplateSelector_TemplateD;
                break;
            case "Geometric_Chuck.SpindleDataDisplay.CurrentRosette":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Geometric_Chuck.SpindleDataDisplay");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "CurrentRosette", "Geometric_Chuck.Spindle.Rosette");
                xamlMember.Getter = get_24_SpindleDataDisplay_CurrentRosette;
                xamlMember.SetIsReadOnly();
                break;
            case "Geometric_Chuck.PathDisplay.Grid":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Geometric_Chuck.PathDisplay");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "Grid", "Geometric_Chuck.RadialGrid");
                xamlMember.Getter = get_25_PathDisplay_Grid;
                xamlMember.Setter = set_25_PathDisplay_Grid;
                break;
            case "Geometric_Chuck.PathDisplay.PathWidth":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Geometric_Chuck.PathDisplay");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "PathWidth", "Double");
                xamlMember.Getter = get_26_PathDisplay_PathWidth;
                xamlMember.Setter = set_26_PathDisplay_PathWidth;
                break;
            case "Geometric_Chuck.PathDisplay.CurrentPath":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Geometric_Chuck.PathDisplay");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "CurrentPath", "Geometric_Chuck.PolygonCollection");
                xamlMember.Getter = get_27_PathDisplay_CurrentPath;
                xamlMember.Setter = set_27_PathDisplay_CurrentPath;
                break;
            case "Geometric_Chuck.BasicLib.Setting":
                userType = (global::OTWB.OTWB_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Geometric_Chuck.BasicLib");
                xamlMember = new global::OTWB.OTWB_XamlTypeInfo.XamlMember(this, "Setting", "Object");
                xamlMember.SetTargetTypeName("String");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_28_BasicLib_Setting;
                xamlMember.Setter = set_28_BasicLib_Setting;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::OTWB.OTWB_XamlTypeInfo.XamlSystemBaseType
    {
        global::OTWB.OTWB_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::OTWB.OTWB_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::OTWB.OTWB_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::OTWB.OTWB_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


